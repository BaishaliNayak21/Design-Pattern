from abc import ABC, abstractmethod

class ItravelBehaviour:
    @abstractmethod
    def travel():
        pass
    
class TravelByTrain(ItravelBehaviour):
    def travel(self):
        print("Travel by Train")

class TravelByBus(ItravelBehaviour):
    def travel(self):
        print("Travel by Bus")

class TravelByPlane(ItravelBehaviour):
    def travel(self):
        print("Travel by Plane")

class IEatBehaviour:
    @abstractmethod
    def eat():
        pass

class EatMacd(IEatBehaviour):
    def eat(self):
        print("Eat chicken burger")

class EatDominoes(IEatBehaviour):
    def eat(self):
        print("Eat newyork style Pizza")

class EatTacoBell(IEatBehaviour):
    def eat(self):
        print("Eat Nacho fry")

class Person():
    def __init__(self, tb: ItravelBehaviour, eb: IEatBehaviour):
        self.tb = tb
        self.eb = eb
    def perform_travel(self):
        self.tb.travel()
        
    def perform_eat(self):
        self.eb.eat()

class Rishab(Person):
    
    def __init__(self):
        super().__init__(TravelByPlane(), EatMacd())
        
    def buy_stock(self):
        print("Rishab loves to buy apple stock")
    
class Baishali(Person):
    
    def __init__(self):
        super().__init__(TravelByTrain(), EatTacoBell())
    def buy_gold(self):
        print("Baishali loves to buy gold")

if __name__ == "__main__":
    baishali = Baishali()
    baishali.perform_travel()
    baishali.perform_eat()
    baishali.buy_gold()
    
    rishab = Rishab()
    rishab.perform_travel()
    rishab.perform_eat()
    rishab.buy_stock()
    
    
        
    
        

    



