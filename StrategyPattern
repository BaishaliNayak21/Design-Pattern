from abc import ABC, abstractmethod

class ItravelBehaviour:
    @abstractmethod
    def travel():
        pass
    
class TravelByTrain(ItravelBehaviour):
    def travel(self):
        print("Travel by Train")

class TravelByBus(ItravelBehaviour):
    def travel(self):
        print("Travel by Bus")

class TravelByPlane(ItravelBehaviour):
    def travel(self):
        print("Travel by Plane")

class IShoppingBehaviour:
    @abstractmethod
    def shop():
        pass

class shopGadget(IShoppingBehaviour):
    def shop(self):
        print("Shops xbox")

class shopDress(IShoppingBehaviour):
    def shop(self):
        print("Shops dresses")

class shopHomeDecor(IShoppingBehaviour):
    def shop(self):
        print("Shops Home decor")

class Person():
    def __init__(self, tb: ItravelBehaviour, sb: IShoppingBehaviour):
        self.tb = tb
        self.sb = sb
    def perform_travel(self):
        self.tb.travel()
        
    def perform_shopping(self):
        self.sb.shop()

class Rishab(Person):
    
    def __init__(self):
        super().__init__(TravelByPlane(), shopGadget())
        
    def buy_stock(self):
        print("Rishab loves to buy apple stock")
    
class Baishali(Person):
    
    def __init__(self):
        super().__init__(TravelByTrain(), shopDress())
    def buy_gold(self):
        print("Baishali loves to buy gold")

if __name__ == "__main__":
    baishali = Baishali()
    baishali.perform_travel()
    baishali.perform_shopping()
    baishali.buy_gold()
    
    rishab = Rishab()
    rishab.perform_travel()
    rishab.perform_shopping()
    rishab.buy_stock()
    
    
        
    
        

    



